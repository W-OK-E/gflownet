"""
This is code adapted from Bengio et al. (2021), 'Flow Network based
Generative Models for Non-Iterative Diverse Candidate Generation',
from
   https://github.com/GFNOrg/gflownet

In particular, this model class allows us to compare to the same
target proxy used in that paper (sEH binding affinity prediction).
"""

import gzip
import os
import pickle  # nosec
from pathlib import Path

import numpy as np
import requests  # type: ignore
import torch
import torch.nn as nn
import torch.nn.functional as F
from rdkit import RDConfig
from rdkit.Chem import ChemicalFeatures
from rdkit.Chem.rdchem import BondType as BT
from rdkit.Chem.rdchem import HybridizationType
from torch_geometric.data import Batch, Data
from torch_geometric.nn import NNConv, Set2Set
from torch_sparse import coalesce

NUM_ATOMIC_NUMBERS = 118  # Number of atoms used in the molecules (i.e. up to Ba)

# These are the fragments used in the original paper, each fragment is a tuple
# (SMILES string, attachment atom idx).
# The attachment atom idx is where bonds between fragments are legal.
FRAGMENTS: list[tuple[str, list[int]]] = [
    ("CO", [1, 0]),
    ("O=c1[nH]cnc2[nH]cnc12", [3, 6]),
    ("S", [0, 0]),
    ("C1CNCCN1", [2, 5]),
    ("c1cc[nH+]cc1", [3, 1]),
    ("c1ccccc1", [0, 2]),
    ("C1CCCCC1", [0, 2]),
    ("CC(C)C", [1, 2]),
    ("C1CCOCC1", [0, 2]),
    ("c1cn[nH]c1", [4, 0]),
    ("C1CCNC1", [2, 0]),
    ("c1cncnc1", [0, 1]),
    ("O=c1nc2[nH]c3ccccc3nc-2c(=O)[nH]1", [8, 4]),
    ("c1ccncc1", [1, 0]),
    ("O=c1nccc[nH]1", [6, 3]),
    ("O=c1cc[nH]c(=O)[nH]1", [2, 4]),
    ("C1CCOC1", [2, 4]),
    ("C1CCNCC1", [1, 0]),
   ('C[C@@H]C', [0, 1]),
('C1OC(O)C(O)C1O', [0, 2]),
('CCCCCCCCC(=O)O', [0]),
('c1cc1=O', [0, 1]),
('C[C@@H](O)CO', [0]),
('C1CCC(=O)O1', [0, 0]),
('[C@H]1COC(=O)N1', [0]),
('CC1=NO[C@@H]C1', [0, 4]),
('c1cc(C)cs1', [0, 4]),
('c1nonc1N', [0]),
('Nc1nccs1', []),
('N1C[C@@H]2CNC[C@@H]2C1=O', [0]),
('C=CCCCCCCCCC(=O)[O-].C=CCCCCCCCCC(=O)[O-].[Zn+2]', []),
('[C@H](N)C(=O)O', [0]),
('OC[C@@H](O)[C@@H](O)[C@@H](O)CO', []),
('CS(=O)(=O)c1ccc(S(C)(=O)=O)s1', []),
('Nc1ccon1', []),
('CCCCO', [0]),
('CC(O)C(N)C(=O)O', []),
('CC1(C)OC(=O)NC1=O', []),
('C(=O)C1=NNC[C@@H]1', [0, 6]),
('O=C1N[C@@H]2[C@@H]1[C@H]1C=C[C@H]2C1', []),
('O=C([O-])C(O)C(O)C(O)C(O)C(O)CO.O=C([O-])C(O)C(O)C(O)C(O)C(O)CO.[Ca+2]', []),
('[C@H]1NC[C@H](C(=C)C)[C@H]1', [0, 7]),
('c1n[nH]c2c1CCC2', [0]),
('CCCC(C)(O)C=C', [0]),
('c1onc(C)c1', [0, 5]),
('O/C(O)=C1/C(=O)CN(C)C1=O', [0]),
('C(=O)CC(C=O)S(=O)(=O)[O-]', [0, 4]),
('N1CSCC1', [0, 4]),
('NC1=NCCS1', [0]),
('O=C1CSC(=O)N1', []),
('[C@@H]1[C@H]C1(C)C', [0, 1]),
('CN1CCSC1=N', []),
('[C@@H]1C[C@H]1C', [0]),
('c1ncc[nH]1', [0]),
('CCC(=O)[O-]', [0]),
('c1c(N)c(C(N)=S)n2c1CCC2', [0]),
('NCC(=O)CCC(=O)O', []),
('C1CCC(=O)C1', [0, 5]),
('O=S1(=O)CC[C@H](S(=O)(=O)[C@H]2CCS(=O)(=O)C2)C1', []),
('[C@H]1[C@H]2CNC[C@@H]12', [0]),
('C1C(=O)N(S(=O)(=O)O)C1C', [0]),
('C(C(N)=O)C(N)=O', [0]),
('CN1C(=S)N[C@@H]2CS(=O)(=O)C[C@@H]21', []),
('C#CCCCCCCCCCCCC(O)CC(O)CO', []),
('N1CC[C@@H](O)[C@@H]1', [0, 5]),
('[C@H](C)CC', [0]),
('c1nncs1', [0, 3]),
('C[C@@H]1O[C@@H]1P(=O)(O)O', []),
('n1ccnc1', [0]),
('[C@H]1[C@H]2CC[C@@H]1NC2', [0]),
('[C@@H](CS)C(=O)O', [0]),
('C(=O)[C@H](CC(C)C)[C@H](O)C(=O)NO', [0]),
('[C@@H]C', [0, 0]),
('c1nnc(N)[nH]1', [0]),
('N1C[C@H]2CNC(=O)[C@H]2C1', [0, 4]),
('c1ccc[nH]1', [0]),
('CCCS(=O)(=O)[O-]', [0]),
('N1C[C@H]C(=O)C1=O', [0, 2]),
('[C@]1(N)C[C@H](C)C1', [0]),
('[C@@]1C[C@@H][C@H]2[C@H][C@H]21', [0, 0, 3, 6]),
('OP(=O)(O)O', [0, 4]),
('[C@H]1CCCN1C', [0]),
('n1cccn1', [0, 2, 4]),
('CN1CC[C@]2(CCCO2)C1', []),
('[C@@H]1CCC[C@@H]1N', [0]),
('CC(=O)[C@@H](O)[C@H](O)[C@H](O)C', [0, 9]),
('c1ccn(C)n1', [0, 2]),
('N(C)CP(=O)(O)C', [0, 6]),
('[C@@H](C)C(=O)O', [0, 1]),
('S(=O)(=O)c1c(C)noc1C', [0]),
('N1C[C@H]2C[C@@H](F)[C@H](O)[C@@H]2C1', [0]),
('n1nnnc1N', [0]),
('N[C@@H](CS(=O)O)C(=O)O', []),
('C(CC)C(N)=O', [0]),
('n1nc([N+](=O)[O-])cc1C', [0]),
('Cc1ccc(C(=N)NO)n1C', []),
('c1nc(C)cs1', [0]),
('C(=O)[O-]', [0]),
('C1CCSS1', [0]),
('C(O)CCC(=O)O', [0]),
('OCC(O)C(O)C(O)C(O)CO', []),
('C(=O)C[C@H](O)[C@@H]CC(C)C', [0, 5]),
('c1nc(C)c(C)s1', [0]),
('O=C(O)[C@H](O)[C@@H](O)[C@H](O)[C@H](O)CO', []),
('C(=O)C', [0, 2]),
('CCCCCN', [0]),
('c1cc[nH]n1', [0, 2]),
('O=C1CCO1', []),
('c1ccco1', [0]),
('Cl.[LiH]', []),
('CCCCCCCCC#CCCCCCCCC(=O)O', []),
('[C@H]1C=C(C[C@@H](C)O)C(=O)O1', [0]),
('C=O', [0, 0]),
('CC(O)CO', [0]),
('c1sccc1', [0, 4]),
('N#C[Fe-2](C#N)(C#N)(C#N)(C#N)N=O.O.O.[Na+].[Na+]', []),
('CCN', [0]),
('[C@H](C)C(=O)O', [0]),
('Nc1nnns1', []),
('N/C(=N/C)NC', [0]),
('O=C(CCCCC(=O)N/N=C/[C@H](O)[C@@H](O)[C@H](O)CO)NO', []),
('C(=O)/C(=N\\O)c1csc(N)n1', [0, 4]),
('NNC(=O)CCCCCC(=O)NO', []),
('C[C@@H]1COC(=O)N1', []),
('C(=O)CC', [0, 2, 4]),
('Cl.NC(=O)CCC(N)C(=O)O', []),
('C1OC2OCC(O)C2O1', [0, 4]),
('NCS(=O)(=O)O', [0]),
('n1nc(C)cc1C', [0, 4]),
('O=[As]O[As]=O', []),
('NCC(=O)O', []),
('[C@@H]1CC[C@@](N)C1', [0, 3]),
('CCC', [0, 1, 3]),
('C(=O)C', [0, 2]),
('N1CCNC1=O', [0, 3]),
('n1cncc1N', [0, 3]),
('[C@@]1CCSC1', [0, 0]),
('NC(=S)N', [0, 3]),
('C[C@@]12C(=O)OC(=O)[C@]1(C)[C@H]1CC[C@@H]2O1', []),
('CC(O)C(O)C(O)C(O)CO', [0]),
('N1CCSC1=N', [0]),
('c1ccc(C=O)o1', [0]),
('C1N2C(=O)CC2S(=O)(=O)C1C', [0, 9]),
('S(C)(=O)=O', [0]),
('N[C@@H](CC(=O)O)C(=O)O', []),
('C(CCC(N)=O)C(=O)O', [0]),
('C(=O)[C@H](C)CS', [0]),
('O=C(O)CF.[NaH]', []),
('[C@@H](C=O)[C@@H](O)[C@H](O)[C@H](O)CO', [0]),
('N1CC[C@H]2[C@H]1CC(=O)N2C', [0]),
('CS(C)(=O)=O', []),
('CC(O)(CC(=O)O)CC(=O)O', []),
('[N+](C)(C)C', [0]),
('C(=O)[C@@H]CCC', [0, 2, 6]),
('Cc1ccc(C(=N)N)n1C', []),
('CCCCCCCCCCCCC(=O)O', [0]),
('c1nncn1N', [0, 3]),
('CN1CC(=O)NC1=O', []),
('C(=O)[C@H](C)N', [0]),
('CCCCCC(C)N.O=S(=O)(O)O', []),
('C(=O)N1C[C@H]N1C', [0, 4]),
('N1CCC[C@@H]1', [0, 4]),
('C(=O)N1NC[C@H]1', [0, 5]),
('C(=O)[C@H](CO)[C@H](O)CCCC[C@H](C)CCC', [0, 14]),
('CCCC(=O)O', [0]),
('C(CS)C(=O)O', [0]),
('C(=O)[C@@H](C#N)C=O', [0, 5]),
('C1SC(=O)NC1=O', [0]),
('c1cc2n(n1)CCC2', [0]),
('C[C@@H](O)[C@@H](O)[C@@H](O)[C@@H](O)CO', [0]),
('NCCCN.O=C(O)C(O)C(O)C(=O)O', []),
('[C@@H]1CCCC1=O', [0]),
('CN1C[C@H](C#N)CC1=O', []),
('O=C(CCCCC(=O)N/N=C/[C@H](O)[C@@H](O)[C@H](O)[C@H](O)CO)NO', []),
('c1sc(=NN)[nH]c1C', [0]),
('ON(C)CC1=[N+](O)O[N-]C1=C', [0, 2]),
('C(=O)N(CCCl)N=O', [0]),
('C[C@H](C[C@H](N)C(=O)O)C(=O)O', []),
('C(=O)CCC=O', [0, 3, 5]),
('N[C@@H](C(=O)O)[C@@H](O)[C@H](O)[C@H](O)CO', []),
('[C@@H]1[C@@H](O)[C@H](O)[C@H]2[C@@H](O)CCN21', [0]),
('c1[nH]cc(C)c1', [0, 2, 6]),
('[C@@H]1O[C@H][C@@H](O)[C@H]1O', [0, 2]),
('C(=O)[C@@H]C', [0, 2, 4]),
('N1C(=O)[C@H]S/C1=N\\CC', [0, 3]),
('c1cncs1', [0, 3]),
('NC(=N)N', [0]),
('[C@H]1[C@H]2CO[C@@H]1CN2', [0]),
('CC(O)CC(O)CCCCCCCCCCCC#C', [0]),
('CS(=O)(=O)CCCCN=C=S', []),
('c1cc(N)n(C)n1', [0]),
('[C@H]1SC(=O)NC1=O', [0]),
('O=C(CCCCC(=O)N/N=C/[C@@H](O)[C@H](O)[C@H](O)CO)NO', []),
('C(=O)n1ccn(C)c1=S', [0]),
('C(=O)[C@@H]C(C)(C)C', [0, 2]),
('C/C=N/N(C)C=O', []),
('CCCCCCCCCCCCCCCC', [0]),
('OC[C@@H](O)[C@@H](O)[C@H](O)[C@H](O)CO', []),
('N=C(N)SC=CC(=O)O', []),
('c1cccn1C', [0, 2]),
('c1ccc(N)s1', [0, 2]),
('C(=O)[C@@H](N)CC(C)C', [0]),
('C(=O)C[C@H](O)C[C@@H]CCCCC', [0, 6]),
('C=C(O)C(=O)O', []),
('CCS(=O)(=O)[O-]', [0]),
('c1nonc1C', [0]),
('O=C(CCCCCC(=O)N/N=C/[C@H](O)[C@H](O)[C@@H](O)[C@@H](O)CO)NO', []),
('CCCCCCCCCCCC=C=CCCCC(=O)O', []),
('CC(=O)O', [0]),
('SCS', [0, 2]),
('C[Si](C)(C)C#CC(=O)NO', []),
('CC(=O)O', []),
('[C@@H](CO)C(=O)O', [0]),
('[C@@H]1CC[C@](N)C1', [0, 3]),
('O=S1(=O)C[C@@H]2NC(=S)N[C@@H]2C1', []),
('C[C@@H](O)C', [0, 3]),
('CC(O)C(O)C(O)C(O)C(=O)[O-]', [0]),
('OCF', [0]),
('N1C[C@@H]CC1=O', [0, 2]),
('C(C)C', [0]),
('c1cscn1', [0]),
('N1CC[C@H]2CNC[C@H]21', [0]),
('C1C[C@H]2CC(CC)=C[C@H]21', [0, 0]),
('CCS(=O)=O', [0, 2]),
('C(=O)CCC(C)C', [0, 2]),
('CCCCC(=O)NN', [0]),
('C1(N)CCC1', [0]),
('CCC(=N)N', [0]),
('c1ccoc1C', [0]),
('C1NC(=O)C(C)=C1C=C', [0]),
('N#CN1CCCC1', []),
('CCCCCCCCCCCCCCCCCCCCCCCCCCCCO', []),
('CCCCCCCCCC(=O)O', [0]),
('[C@@H](O)CN', [0]),
('CC=C', [0]),
('N/N=C(/N)NO', []),
('C(=O)CCCCCCC(=O)NN', [0]),
('F[C@H]1CCNC1', []),
('O=S(=O)([O-])CCCS(=O)(=O)[O-].[Na+].[Na+]', []),
('NC(=O)CC(N)C(=O)O.O', []),
('C(=O)C(=C)O', [0]),
('c1c(C)n[nH]c1N', [0]),
('[C@H]1[C@H][C@H]2CC[C@@H]1O2', [0, 1]),
('[C@H]1CCS(=O)(=O)C1', [0]),
('N1C=NCC1=O', [0, 3]),
('NC(=O)CC[C@@H](N)C(=O)O', []),
('Cc1cc(=O)[nH][nH]1', []),
('[C@@H]1CCC(=O)N1', [0]),
('O=C(O)C[C@H](O)C(=O)O', []),
('CN1C[C@H]2CON[C@@H]2C1', []),
('N1CC(=O)CC1=N', [0, 4]),
('O=C([O-])CCCO.[Na+]', []),
('COP(=O)(OC)C(O)C(Cl)(Cl)Cl', []),
('CC#N', [0]),
('N1C[C@@H]2[C@H][C@@H]2C1', [0, 3]),
('C[C@@H](O)CCl', [0]),
('N1C[C@H]2CNC(=O)[C@@H]2C1', [0, 4]),
('C[C@@H](N)CCCP(=O)(O)O', []),
('[C@@]1(C)OC(=O)N(C)C1=O', [0]),
('OC[C@@H](O)[C@@H](O)[C@H](O)[C@@H](O)CO', []),
('CC(C)=O', [0]),
('CC(F)(F)F', [0]),
('C(C)(C)C', [0]),
('C1OC(=O)C1', [0, 4]),
('[C@]1(C)NC(=O)NC1=O', [0]),
('NCCCC[C@H](N)C(=O)O', []),
('C[C@@H](C)N', [0]),
('c1nn(C)c2c1CNC2', [0]),
('c1occc1', [0, 2, 4, 6]),
('O=P(O)(O)C(Cl)(Cl)P(=O)(O)O', []),
('C(=O)CCC', [0, 4]),
('CCC', [0, 2]),
('SC1=C(C(=O)O)N2C(=O)[C@H][C@H]2C1', [0, 9]),
('C(=O)N(CCCl)[N+][O-]', [0]),
('NCCC1=CSC2=NCCN12', []),
('[C@H]1CO1', [0]),
('C(=O)C[C@H](O)C[C@H](O)CCCCC', [0]),
('On1ccnc1', [0]),
('c1[nH]nc2c1CCC2', [0]),
('CCC(N)=O', [0]),
('c1nnc(N)o1', [0]),
('N1CC(O)C1', [0]),
('Cc1nn[nH]n1', []),
('CC(C)(CCCCCC(O)CCCCCC(C)(C)C(=O)O)C(=O)O', []),
('C=CN1CCCC1=O', []),
('NC1=NNC(=O)C1', []),
('[C@@H](C(=O)O)C(C)C', [0, 4]),
('CC(C(=O)O)C(=O)O', []),
('CCCC', [0]),
('Cl.NCCCCC(N)C(=O)O', []),
('C1CCCN1', [0]),
('O=C(O)CCN=C1NC(=O)CS1', []),
('CN(C)C(=N)N=C(N)N', []),
('C(=O)CC', [0, 3]),
('O=C(O)[C@@H](O)[C@H](O)C(=O)O', []),
('N1C(=O)[C@@H]2[C@@H](C1=O)[C@@H]1C=C[C@@H]2O1', [0]),
('NC1=NC(=O)CS1', [0]),
('CC1(C)NN1CCCN1NC1(C)C', []),
('CCCCCCCCCCCCCCCCCC', [0]),
('N1C(=O)[C@H]2[C@@H]3C=C[C@H](C3)[C@@]2(C)C1=O', [0]),
('C(=O)NN', [0]),
('c1ccno1', [0]),
('[C@@H]1C[C@@H]2CC[C@@]1(C)C2(C)C', [0]),
('[C@@H]CN', [0, 0]),
('O=C(O)CCl', []),
('CS(=O)(=O)CCC#N', []),
('NC(=S)N1CCCC1', []),
('N[C@H](CO)C(=O)O', []),
('[C@H]1[C@H](O)CC(=O)[C@@H]1', [0, 6]),
('c1c[nH]cn1', [0]),
('CCCCCCCCCCCCC(C(=O)O)C(C)C(=O)O', []),
('[C@H](C)C(N)=O', [0]),
('C(=O)NN1C(=O)CSC1=S', [0]),
('c1nc(C)ns1', [0]),
('NCCCCN', []),
('C(=O)CC', [0]),
('N(C)C', [0]),
('C(=O)[C@@H]CC', [0, 2, 5]),
('N1C(=S)S[C@@H]2CS(=O)(=O)C[C@@H]21', [0]),
('O=C1N[C@H]2[C@@H]1[C@@H]1C=C[C@H]2C1', []),
('C1O[C@H]2CC(=O)N2[C@@H]1', [0, 7]),
('CCCCCCCCCCCCCCCCC(C(=O)O)C(O)(CC(=O)O)C(=O)O', []),
('C1COC(=O)C1', [0, 5]),
('N(C)C(=N)N', [0]),
('S(=O)(=O)c1cn(C)c(C)n1', [0]),
('O=C(O)CCC(=O)O', []),
('[C@@H](N)C(=O)O', [0]),
('[C@H]1NC(=O)NC1=O', [0]),
('C(=O)CC[C@H](N)C(=O)O', [0]),
('c1nn[nH]n1', [0]),
('[C@H]1C[C@@](N)C1', [0, 2]),
('C(=O)C1=NO[C@]2(CCNC2)C1', [0]),
('[C@@H]1C[N+](C)(C)C[C@@H]1O', [0]),
('N=C1NC(=O)CS1', []),
('CC1(C)[C@H]2CC[C@@]1(C)/C(=N/O)C2', []),
('CC[C@H](N)C(=O)O', [0]),
('CCC1=C(C)CCC1=O', [0]),
('N1C[C@H][C@@H](N)C1', [0, 2]),
('CC(C)CC(CN)CC(=O)O', []),
('[C@H]1CC[C@H]O1', [0, 3]),
('CN1C(=O)[C@@H]2[C@@H]3C[C@H]4[C@@H](O[C@H]1[C@H]42)[C@H]3O', []),
('[C@@H]1S/C(=N/C)N(C)C1=O', [0]),
('N=C(N)S/C=C\\C(=O)O', []),
('C(=O)CC(C)(C)C', [0]),
('n1cncn1', [0]),
('NCCCC(N)C(=O)O.NCCCC(N)C(=O)O.O=C(O)CCC(=O)C(=O)O', []),
('C(=O)[C@H]C', [0, 2]),
('c1cnn(C)c1', [0]),
('CN(C)NC(=O)CCC(=O)O', []),
('CC1=NCCN1', []),
('NNC(=O)CCCCCCC(=O)NO', []),
('CCCCCCO', [0]),
('c1nn(C)cc1', [0, 5]),
('CCC[C@@H](N)C(=O)O', [0]),
('C1Cn2cnc[n+]2C1', [0]),
('c1sc(=O)n(C)c1C', [0]),
('CCCCC(N)=O', [0]),
('C', [0, 0]),
('CC(C)C', [0]),
('CC(O)CCl', [0]),
('C(=O)CCCCCCC=O', [0, 8]),
('C(=O)CCCCCCC(=O)N/N=C/[C@H](O)[C@@H](O)[C@H](O)CO', [0]),
('C(=O)C=C', [0]),
('C[C@@H][C@H][C@H][C@H][C@H]C', [0, 1, 3, 5, 7, 9, 11]),
('c1c[nH][nH]c1=O', [0]),
('c1cn[nH]c1', [0]),
('CCS(=O)(=O)CC', [0]),
('[C@H](CC(=O)O)C(=O)O', [0]),
('CCCC(C)CC=O', [0]),
('CN1C(=O)OC(C)(C)C1=O', []),
('S=C1NCCN1', []),
('C(C)=O', [0]),
('O=C(CCCCCCC(=O)N/N=C/[C@H](O)[C@H](O)[C@@H](O)[C@@H](O)CO)NO', []),
('Cc1cc(N)no1', []),
('OS(C)(=O)=O', [0]),
('OP(=S)(O)SCSP(=S)(O)O', [0, 3, 10, 12]),
('CCCN', [0]),
('C12CC(CN1)C2', [0]),
('[C@H](O)CN', [0]),
('CC(O)CC(O)CCCCCCCCCCCC=C', [0]),
('N1CC23C=C[C@H](C[C@H]2S1(=O)=O)O3', [0]),
('N1CC(=O)NC1=O', [0, 4]),
('n1cccc1', [0, 4]),
('[O-][NH2+]N1CCCC1', []),
('N1C[C@@H]2C[C@H]2C1', [0, 3]),
('CCCCCCCCCCCCCCCCCC(=O)O', []),
('n1c(=O)[nH][nH]c1=S', [0]),
('NC(=N)SC', [0]),
('Cl[Pt]Cl.N.N', []),
('CCCCC(=O)O', [0]),
('CCCCC[C@@H](C)N', []),
('S=P(N1CC1)(N1CC1)N1CC1', []),
('O=c1[nH]cn[nH]1', []),
('c1ccc(Br)s1', [0]),
('NC(C)=N', [0]),
('CC[C@H](O)CCCCCC', [0]),
('C(C)CCCCCCCCCCC', [0, 1]),
('C', [0, 0]),
('[C@H]1SC(=N)NC1=O', [0]),
('[C@@H]1CO[C@H]2[C@@H]1OC[C@@H]2O', [0]),
('O=C(O)CC[C@@H](CP(=O)(O)O)C(=O)O', []),
('N1CCC[C@H]1', [0, 4]),
('N=C(N)N', []),
('C(=N/n1cnnc1)\\c1ccco1', []),
('C1CCCN1', [0, 2]),
('Cl[Ca]Cl', []),
('Cn1nccc1N', []),
('n1nc2c(c1N)CCC2', [0]),
('N1C[C@@H]2CNC(=O)[C@@H]2C1', [0, 4]),
('C=C[C@@H](N)CCC(=O)O', []),
('c1sc(C)cc1/C=N/O', [0]),
('[C@@H](O)CO', [0]),
('C/N=C/c1sc2scc(C)c2c1C', [0]),
('[C@@H]1[C@H]N(C)C(=O)N1C', [0, 1]),
('C(Br)C(Cl)(Cl)Br', [0]),
('CCC', [0]),
('CCC', [0]),
('N1C[C@H]CC1=O', [0, 2]),
('N1CCC1', [0, 2]),
('N(CP(=O)(O)O)CP(=O)(O)O', [0]),
('CN1C[C@@H]2CNC[C@@H]2C1=O', []),
('C(=O)CC(C)C', [0]),
('C(=O)C(=O)O', [0]),
('C[C@H]1C/C(=C\\N(C)C)C(=O)C1=O', []),
('C1(C)COC1', [0]),
('C1C[C@@H]2[C@@H][C@H](O)C[C@H]2O1', [0, 3]),
('C1CO[C@@]2(C1)CCNC2', []),
('O[Cd]O', [0, 2]),
('[C@@H]1C[C@H]CN1', [0, 2]),
('[C@H]1[C@H][C@@H]2C[C@@H]1[C@@H]1C(=O)N(C)C(=O)[C@@H]21', [0, 1]),
('[C@H]1NC(=O)N(C)C1=O', [0]),
('n1ccnc1', [0, 4]),
('SP(=S)(OC)OC', [0]),
('O=C(CCCCC(=O)N/N=C/[C@H](O)[C@@H](O)[C@@H](O)[C@H](O)CO)NO', []),
('C=c1nc(C)sc1=C1NN=C(N)O1', []),
('C(C)C', [0]),
('CCC[C@H]C(N)=O', [0, 3]),
('c1csc(N=C(N)N)n1', [0]),
('C1CCSC1', [0, 0]),
('CC(=O)/C(C)=N/O', []),
('[C@H]1CCC[C@@H]1O', [0]),
('n1ncnc1', [0, 4]),
('CCC(=C)C', [0]),
('[C@H](N)C(C)C', [0]),
('CCC[C@H]C(=O)O', [0, 3]),
('c1ccsc1C', [0]),
('c1nn2c(C)nnc2s1', [0]),
('[C@@H]1CC(=O)N(C)C1', [0]),
('N[C@@H]1CCN(O)C1=O', []),
('NCCCS(=O)(=O)O', []),
('c1cc(C)sc1C', [0]),
('C(=O)/C(C)=N/NC(C)=O', [0]),
('C(=O)[C@@H]C(C)C', [0, 2]),
('O=C1O[C@H]2CN[C@@H]1C2', []),
('c1cn[nH]n1', [0]),
('n1cc(C2=NO[C@H]C2)c(C)n1', [0, 6]),
('CCN', [0]),
('NC(CO)(CO)CO', []),
('[C@@H]1C[C@H](O)[C@@H](C)O1', [0]),
('c1csnn1', [0]),
('CCCO', [0]),
('O=C(O)C(S)C(S)C(=O)O', []),
('[C@H]1C[C@H]2C[C@@H]1C[C@@H]2', [0, 6]),
('N', [0, 0]),
('c1ccc(C)s1', [0]),
('[C@H]1CCSC1=O', [0]),
('[C@@H](C(=O)O)[C@H](C)CC', [0]),
('N1C(=O)[C@H]2[C@H](O)CS[C@H]2C1=O', [0]),
('c1ccc(Cl)s1', [0]),
('c1ncc(Cl)n1C', [0]),
('CC1(C)CCNC1=O', []),
('n1oc(=O)[nH]c1=O', [0]),
('N1C[C@H]2C[C@@H](F)[C@@H](O)[C@@H]2C1', [0]),
('Cl.NC(CS)C(=O)O', []),
('CC', [0, 1]),
('CC=O', [0]),
('CC(C)C(N)C(=O)O', []),
('N1C[C@H]2CNC[C@H]2C1', [0]),
('[C@@H]1[C@@H]2[C@H]3CCN2C[C@H]1O3', [0]),
('C(=O)C(C)S', [0]),
('CSC1=NCCN1', []),
('CCC[C@H](N)C', [0, 5]),
('[C@@H]1[C@H]2OC[C@H](O)[C@H]2O[C@@H]1O', [0]),
('SC1=C(C(=O)O)N2C(=O)CC2C1C', [0, 9]),
('[C@@H](CCC(N)=O)C(=O)O', [0]),
('C=CCCCCCCCCCCCC(O)CC(O)CO', []),
('O=S1(=O)NCC2(COC2)O1', []),
('c1[nH]c(C)nc1[N+](=O)[O-]', [0]),
('n1ccnc1[N+](=O)[O-]', [0]),
('c1ccon1', [0]),
('C1NC(=O)NC1=O', [0]),
('Cl.NCC(=O)CCC(=O)O', []),
('C(=O)[C@H]C(C)C', [0, 2]),
('C(=O)CCCCCCC(=O)N/N=C/[C@@H](O)[C@H](O)[C@H](O)CO', [0]),
('CCO', [0]),
('C[C@@H]1CCC(=O)O1', []),
('CCCCS(=N)(=O)CC[C@H](N)C(=O)O', []),
('n1ccsc1=N', [0]),
('[C@@H]1CCCN1C', [0]),
('N1C(C)=N[C@H]2C=C[C@H][C@H]21', [0, 7]),
('C(=O)[C@@H]CCC(=O)O', [0, 2]),
('CCCCCC', [0]),
('CC(O)(P(=O)(O)O)P(=O)(O)O', [0]),
('CC(O)C(=O)[O-].[NH4+]', []),
('O=C(O)CCCCCCC(=O)O', []),
('c1csc(/C(=N/O)C(N)=O)n1', [0]),
('CON', []),
('c1n[nH]c(=S)n1N', [0]),
('c1cn2nc(C)sc2n1', [0]),
('C[C@H](C)C(=O)O', [0]),
('[C@@H]1CCOC1', [0]),
('C[C@@H](O)C[C@@H](O)CCCCCCCCCCCC#C', [0]),
('c1cn2c(n1)NCC2', []),
('N=C1NC(=O)N2CC12', []),
('c1c(C)n[nH]c1C', [0]),
('[C@@H](C)CC(=O)O', [0]),
('c1cc(C)nn1C', [0]),
('Cl.Cl.N=C(N)N', []),
('NCCCC(O)(P(=O)(O)O)P(=O)(O)O', []),
('Cl.NCCCC(N)(C(=O)O)C(F)F.O', []),
('NN=C(N)N', []),
('C(=O)CC[C@H](C)N', [0]),
('[C@@H]1C[C@H](O)C[N+]1(C)C', [0]),
('c1c(N)cnn1C', [0]),
('N1CCNC1=O', [0]),
('CCC', [0, 1]),
('n1nccn1', [0]),
('CN(C)C(=S)SSC(=S)N(C)C', []),
('Cl.NCC(N)C(=O)O', []),
('[C@H]1SC[C@H]2NC(=O)N[C@H]21', [0]),
('NCCS', []),
('[C@@H]1[C@H](O)[C@@H]C[C@H]1', [0, 3, 6]),
('C[C@@H](O)[C@H](N)C(=O)O', []),
('C(=O)N1NC[C@@H]1', [0, 5]),
('C[C@H](O)[C@H](O)[C@@H](O)[C@@H](O)/C=N/NC(=O)CCCCCC(=O)NO', []),
('NC1=N[C@H]2CS(=O)(=O)C[C@@H]2S1', []),
('c1nonc1', [0, 4]),
('CC(=O)CC[C@H](N)C(=O)O', [0]),
('CC#CC', [0, 3]),
('n1nc(C)cc1', [0, 5]),
('C1N2C(=O)CC2SC1(C)C', [0, 4]),
('c1ncc([N+](=O)[O-])n1C', [0]),
('C[C@@H](N)CCCC(C)(C)O', []),
('n1cc[nH]c1=S', [0, 1]),
('C[C@H](O)CC(=O)O', []),
('[C@@H](C)N', [0]),
('n1cccn1', [0]),
('N1C[C@@H]2COC[C@@]2C1', [0, 6]),
('N1C[C@H](O)CC1=O', [0]),
('Nc1nnc2n1CCS2', []),
('SS(C)(=O)=O', [0]),
('S=c1[nH]cn[nH]1', []),
('O=C(O)CC(CC(=O)O)C(=O)O', []),
('NC(CC(=O)O)C(=O)O', []),
('n1ncnn1', [0]),
('CC(N)=S', [0]),
('OC=C', [0]),
('CCC(=O)O.[NaH]', []),
('c1o[nH]c(=O)c1', [0, 5]),
('O[Si](C#CCCCCCC)(C(C)C)C(C)C', [0]),
('c1csc(N)n1', [0]),
('C(CC(C)C)C(=O)O', [0]),
('CO/N=[N+](\\[O-])N(C)C[C@@H](C)O', []),
('C#CC(C)(O)CC', []),
('OC[C@@H](O)[C@@H](O)CO', []),
('CCCCCC', [0]),
('C[C@H](O)[C@H](O)[C@@H](O)[C@@H](O)/C=N/NC(=O)CCCCC(=O)NO', []),
('Cc1ccc(/C=N/N(C)C2=NCCN2)o1', []),
('CCC(=O)O', [0]),
('CCCCCCCCCC', [0, 9]),
('C1COC2CCOC12', [0, 4]),
('ON=C(N)N', [0]),
('c1c(C)noc1C', [0]),
('c1cncn1C', [0, 3]),
('NC(C(=O)O)C(O)C(=O)O', []),
('C(=O)N1[C@@H]CN1C', [0, 3]),
('NC(=O)N/N=C/c1ccc([N+](=O)[O-])o1', []),
('CCCC[C@H](N)C(=O)O', [0]),
('O=C(O)[C@H](O)[C@H](O)[C@H](O)[C@H](O)CO', []),
('Cn1ccnc1', []),
('S[NH2+][O-]', [0]),
('C1(O)CCCC1', [0]),
('[C@@H](CCC(=O)O)C(=O)O', [0]),
('CCCS(=O)(=O)O', [0]),
('c1occc1C', [0]),
('C[C@@H](O)CO', []),
('[C@@H]1N2C(=O)[C@@H](N)[C@H]2SC1(C)C', [0]),
('CCCC(=O)O', [0]),
('C(=O)/C(C#N)=N/O', [0]),
('C(N)=O', [0]),
('N', [0, 0, 0]),
('c1c(C)nn(C)c1C', [0]),
('C(=O)[C@@H](N)CS', [0]),
('Cl.N=C(N)n1cccn1', []),
('CC(C)CS(=O)(=O)C1CNC1', []),
('N1C(=O)CSC1=O', [0]),
('C(=O)CCCCCCCCCCCCCCC', [0]),
('[C@@H]1CNC(=O)[C@H]1', [0, 5]),
('C(Cl)(Cl)Cl', [0]),
('c1ccco1', [0, 3]),
('CCC1=C(C)CCC1=O', [0, 5]),
('[C@@H]1C2C=CC3(O2)C1C(=O)N1CCS[C@H]13', [0]),
('N[C@H](CCC(=O)O)C(=O)O', []),
('CCCCCCC', [0]),
('CCCCC', [0]),
('c1cc(C)oc1C', [0]),
('[C@H](CC)C(=O)O', [0]),
('c1c(C)no[n+]1[O-]', [0]),
('c1ccc(C#C)s1', [0]),
('C[C@H](N)C(=O)O', [0]),
('S=c1ccss1', []),
('c1cn(C)nc1C', [0]),
('[C@H]1C[C@@H](O)[C@@H]C1', [0, 4]),
('N1CC(=O)C1', [0]),
('O=C(O)CC[N+](=O)[O-]', []),
('c1c(C)o[nH]c1=O', [0]),
('ONC(=N)N', [0]),
('CN1CCN(C)C1=O', []),
('N[C@H]1CNC(=O)C1', []),
('C(=O)CN=[N+]=[N-]', [0]),
('n1cncc1O', [0, 3]),
('[C@H](CCC)C(=O)O', [0]),
('n1cc(C)cc1C', [0, 4]),
('O=C(CCCCCCC(=O)N/N=C/[C@H](O)[C@@H](O)[C@H](O)CO)NO', []),
('O=C(CCCCCC(=O)N/N=C/[C@H](O)[C@@H](O)[C@H](O)CO)NO', []),
('CCCCCCCCC(=O)O', []),
('CCC[C@@](C)(O)C=C', [0]),
('Cc1cc(C)n(C(N)=S)n1', []),
('CC(C)CCCC(C)N', []),
('CCC[C@@H]C(N)=O', [0, 3]),
('O=C(CCCCCC(=O)N/N=C/[C@@H](O)[C@H](O)[C@H](O)CO)NO', []),
('N1CC(C)(C)[C@@](C)(O)C1', [0]),
('C(=O)C=[N+]=[N-]', [0]),
('C(C)(C)C(=O)O', [0]),
('NC(=O)NO', []),
('C1(C)C2CCC(C2)C1(C)C', [0]),
('C[Se]CCC(N)C(=O)O', []),
('c1csc(C)c1C', [0]),
('C[C@@H](O)[C@H](O)[C@@H](O)[C@@H](O)CO', [0]),
('CC=NN(C)C=O', []),
('CC(O)CC(=O)[O-]', [0]),
('CCCCCCCCCCCCCCCC(=O)CCO', []),
('CN(C)/C=C/C(=S)c1cccs1', []),
('CC(C)(O)C(Cl)(Cl)Cl', []),
('[C@@H]1[C@@H]2CC[C@@H](C2)[C@H]1', [0, 6]),
('C[C@@H]1NC(=O)NC1=O', []),
('C(N)=O', [0]),
('NC(=O)NN=Cc1ccc([N+](=O)[O-])o1', []),
('CCCCN', [0]),
('NCCCC(=O)O', []),
('c1cc(=O)[nH]n1C', [0]),
('CC(O)(P(=O)(O)O)P(=O)(O)O', []),
('O=C(CCCCC(=O)N/N=C/[C@H](O)[C@H](O)[C@@H](O)[C@@H](O)CO)NO', []),
('[C@@H]1[C@@H](O)[C@H]2OC(=O)[C@]34O[C@@H]5OC(=O)[C@H](O)[C@]51[C@]23[C@@H](O)[C@@H]1OC(=O)[C@@H](C)[C@@]14O', [0]),
('C(=O)CCCCCCC(=O)N/N=C/[C@H](O)[C@H](O)[C@@H](O)[C@H](C)O', [0]),
('CCCCCC(=O)O', [0]),
('n1cnnn1', [0]),
('N[C@H]1CCS(=O)(=O)C1', []),
('[C@H](CC(C)C)C(=O)O', [0]),
('C[C@@H](O)[C@@H](O)[C@@H](O)C/C=N/NC(=O)CCCCCCC(=O)NO', []),
('O=C(O)CCC(=O)C(=O)O', []),
('n1cc([N+](=O)[O-])cn1', [0]),
('[C@H]1O[C@@H]1', [0, 2]),
('NC(=O)CCC(N)C(=O)O', []),
('CCCCCC[C@H](C(=C)C(=O)O)C(=O)O', [0]),
('C(=O)CBr', [0]),
('[C@H]1[C@H][C@H]2C=C[C@@H]1C2', [0, 1]),
('C(=O)NNC=O', [0, 4]),
('[C@H]([C@H](C)CCCC)[C@@H]C[C@@H](C)C[C@H](O)CCCC[C@@H](O)C[C@H](O)[C@H](C)N', [0, 7]),
('Cl.Cl.NCCCCN', []),
('CCCC(CCC)C(=O)[O-].[Na+]', []),
('c1cnns1', [0]),
('C1OC(=O)C(O)=C1O', [0]),
('[C@H]1N[C@H]2CC[C@@H]1C2', [0]),
('N1C[C@H]2CON[C@@H]2C1', [0]),
('[C@@H]1C=CCC1', [0]),
('Nc1nnnn1/N=C/c1ccco1', []),
('C=C[C@](C)(O)CCC[C@H](C)CCC[C@H](C)CCCC(C)C', []),
('CCCCCCCCCCCCCCCC(=O)C(F)(F)F', []),
('C(=O)[C@@H](C)N', [0]),
('O=C1CN(N=Cc2ccc([N+](=O)[O-])o2)C(=O)N1', []),
('C(C)(C)CO', [0]),
('CCC[C@H](N)C(=O)O', [0]),
('CC(=O)O', [0]),
('CCS(=O)(=O)C1CNC1', []),
('CCCCCCCCCCCCP(=O)(F)CC(C)C', []),
('C(=O)NNC[C@H](O)CC', [0]),
('n1ccnn1', [0]),
('N1CCOC1=O', [0]),
('OCC(O)C(O)C(O)C(O)C(O)CO', []),
('C(=O)CCC=O', [0, 4]),
('CCCl', [0]),
('Cn1cncc1C#N', []),
('NC(=N)NO', [0]),
('[N-]=[N+]=N', []),
('n1c(C)ncc1N', [0, 4]),
('CCF', [0]),
('N=C(N)NO', []),
('NC(C(=O)O)C(O)C(O)C(O)CO', []),
('[C@H](C(=O)O)C(C)C', [0]),
('c1c[nH]cn1', []),
('NC=N', [0]),
('n1nc(C)cc1C', [0]),
('NC(=S)NN', [0]),
('Cc1noc(C)c1N', []),
('O=C(O)CC(O)(CC(=O)O)C(=O)O', []),
('n1cnnc1', [0]),
('CCCCS(=N)(=O)CC[C@@H](N)C(=O)O', []),
('c1cc[nH]n1', [0]),
('CC1C(=O)CCC1=O', []),
('[C@@H]1[C@@H][C@@H]2C=C[C@@H]1C2', [0, 1]),
('C[C@@H](N)C(=O)O', [0]),
('c1cnco1', [0]),
('C[C@H](N)CCCP(=O)(O)O', []),
('n1c(N)csc1=S', [0, 3]),
('O=C(CCCCC(=O)N/N=C/[C@H](O)[C@@H](O)[C@@H](O)[C@H](O)C(=O)O)NO', []),
('N1C(=O)[C@H]2[C@@H](O)CS[C@H]2C1=O', [0]),
('C1CCCC1', [0, 0]),
('C[C@@H](N)CO', []),
('O=C1CSC(=Nc2nccs2)N1', []),
('C1CC1(C)C', [0, 1]),
('NC(=O)CCCCC(N)=O', []),
('[O-][NH2+]N(CCO)CCO', []),
('[C@@H]1C[C@@H]1', [0, 2]),
('c1ccn[nH]1', [0]),
('CC(O)CC(C)(C)O', []),
('[C@@H]1CC(Cl)=NO1', [0]),
('N1CC[C@H](O)[C@@H]1', [0, 5]),
('C(=O)CCCCC=O', [0, 6]),
('C(=O)CCCCCCC', [0]),
('[C@@H](C)P(=O)(O)O', [0]),
('n1cccc1', [0]),
('Cl.NCCS', []),
('c1cn[nH]c1N', [0]),
('CC=C', [0]),
('CC#N', []),
('N1C[C@@H](O)CC1=O', [0]),
('c1nocn1', [0, 3]),
('c1cnc[nH]1', [0]),
('c1cscn1', [0, 3]),
('NC(=N)N(C)C', [0]),
('[C@H]1CCCO1', [0]),
('OCC(O)C(O)CO', []),
('N1C[C@@H]2C[C@H]1CN2', [0]),
('C(O)C(=O)O', [0]),
('CCC(=O)O', [0]),
('[C@@H]1C[C@@H](O)CN1', [0]),
('N1CC[C@H](O)C1', [0]),
('C#CCCCCCCCCCCC[C@H](O)C[C@H](O)CO.C=CCCCCCCCCCCC[C@H](O)C[C@H](O)CO', []),
('C(=O)CC', [0]),
('C(=O)CCN', [0]),
('[C@@H](C)O', [0]),
('[C@H]CN', [0, 0]),
('OCC(O)CO', []),
('O=C1CSC(=S)N1', []),
('CC(O)CC(=O)O', [0]),
('C=CCCCCCCCCC=O', []),
('n1ccnc1C', [0]),
('CC12CCC(CC1=O)C2(C)C', []),
('[C@H]1C=C[C@@H](O)C1', [0]),
('C(C)=O', [0]),
('C12CC(CN1)C2', [0]),
('NC(=O)C[C@H](N)C(=O)O', []),
('C(=O)N1C[C@@H]N1', [0, 4]),
('c1nccn1C', [0]),
('O=[Si](O)O', []),
('C[C@H](O)[C@H](O)[C@@H](O)[C@@H](O)/C=N/NC(=O)CCCCCCC(=O)NO', []),
('O=C1C=CC(=O)N1', []),
('CCC', [0, 1]),
('[C@@H](C)CN', [0]),
('[C@H](O)[C@@H]O', [0, 2]),
('[C@H]1N[C@@H](C#N)C[C@H]1', [0, 6]),
('CC(=O)O', [0]),
('N[C@@H](C[C@@H](F)C(=O)O)C(=O)O', []),
('C(=O)C(C#N)C1=NCCC1', [0]),
('C(=O)/C(=N/O)c1csc(N)n1', [0]),
('C(=O)[C@@H](O)C(C)(C)CO', [0]),
('N1CCN=C1N', [0]),
('CCC#N', [0]),
('c1cccs1', [0]),
('C1N2C(=O)CC2S(=O)(=O)C1(C)C', [0]),
('CC(=O)N=c1sc(S(N)(=O)=O)nn1C', []),
('C1COC2C(O)COC12', [0]),
('NC(N)=S', [0]),
('C(=O)CCCC', [0]),
('C(C)(O)CN', [0]),
('[C@]12CC[C@](N)(CC1)C2', [0]),
('C1SC(=O)NC1=O', [0, 4]),
('n1ncc(Br)c1', [0, 5]),
('[C@H]1CNC[C@@H]1O', [0]),
('N1CC2(CNC(=O)O2)C1', [0]),
('NC(=N)NC#N', [0]),
('CCC(=O)O', [0, 0]),
('c1ncn2c1C(=O)OC2(C)C', [0]),
('C(CC)CO', [0]),
('COS(C)(=O)=O', []),
('SP(=O)(S)S', [0, 3, 5]),
('CC[C@H](C)CCC', [0, 6]),
('CCCCCCCCCCCCCC', [0]),
('CN1C[C@@H](N)CC1=O', []),
('CN1C[C@H]2CN[C@H]2C1', []),
('CN1C(=O)N(C)[C@H]2NC(=O)N[C@@H]21', []),
('C(=O)C(N)CS', [0]),
('C(C)CC[C@H](C)CCC[C@H](C)CCCC(C)C', [0]),
('C(=O)C=O', [0, 2]),
('c1ncnn1C', [0]),
('C[C@@H](O)C[C@@H](C)CCCC', [0]),
('[C@@H]1[C@@H]2[C@H]1S(=O)(=O)C[C@]2N', [0, 7]),
('c1ncn(C)n1', [0]),
('[C@H]1CS(=O)(=O)C[C@@H]1', [0, 6]),
('O=C(O)C(Cl)Cl.[NaH]', []),
('C12CC(C1)C2', [0]),
('NCCCN', []),
('N1C(=O)C=CC1=O', [0]),
('CCC(=O)NO', []),
('S[N+][O-]', [0]),
('N1C[C@H][C@@H]2COC[C@@H]21', [0, 2]),
('[C@H]1OC2(CCCC2)O[C@@H]1', [0, 8]),
('c1sc(C)nc1N', [0]),
('Cc1c[nH]cn1', []),
('CC=C', [0]),
('c1c([N+](=O)[O-])ncn1C', [0]),
('[C@H]1CC[C@@]2(C1)NC(=O)NC2=O', [0]),
('Cc1cc(=O)n(C(N)=S)[nH]1', []),
('CCC[C@@H](C)CCO', [0]),
('CC(N)=O', [0]),
('c1nnc[nH]1', [0, 3]),
('CO/N=[N+](\\[O-])NC(C)C', []),
('c1cc(C)no1', [0]),
('CCC', [0, 2]),
('C(=O)C(C)C', [0]),
('NC(N)=O', []),
('NCCO.NCCO.O[AsH]O[AsH]O', []),
('C(=O)N1C[C@@H]N1C', [0, 4]),
('C1NC(=S)NC1=O', [0]),
('C[C@]12C(=O)OC(=O)[C@]1(C)[C@H]1CC[C@H]2O1', []),
('OS(=O)(=O)[O-]', [0]),
('C(=O)C(C)(C)C', [0]),
('[C@@H](C)C', [0, 2]),
('[C@@]1(O)C[C@H]2OC(=O)C[C@]23C(=O)O[C@H]2OC(=O)[C@@H](O)[C@]231', [0]),
('c1ccsc1', [0]),
('C(=O)CCCCCCCCCCCC', [0, 13]),
('[C@@]12O[C@H]3[C@@H](O)[C@H]4C[C@@H]3[C@@H]1[C@@H]4C(=O)N2C', [0]),
('[C@H]1OC(=O)C(=O)[C@@H]1O', [0]),
('[C@H]1C[C@@H]2C=C[C@H]1C2', [0]),
('c1nnc(C)o1', [0]),
('c1c(N)c(C#N)c2n1CCC2', [0]),
('c1nc[nH]c1', [0, 4]),
('NNC(=O)CCCCC(=O)NO', []),
('N[C@H](CC(=O)O)C(=O)O', []),
('c1ccon1', [0, 2]),
('[C@H]1O[C@@H]2OC(C)(C)O[C@@H]2[C@H]1', [0, 9]),
('N1[C@@H]2OC(C3O[C@H]4[C@H](O3)NS(=O)(=O)N4)O[C@@H]2NS1(=O)=O', [0, 9, 14, 18]),
('CCCCCCCC(=O)O', [0]),
('c1sc(N)nc1C', [0]),
('N1C[C@H]2C[C@@H]1CN2', [0]),
('n1cc[n+](C)n1', [0]),
('N1C(=O)C=C(C)C1=O', [0]),
('[C@H]1NC(=O)N[C@@H]1C', [0]),
('N[C@H]1CCN(O)C1=O', []),
('NC(=N)N', [0, 3]),
('C(CCC(CC)CCCC)CC(C)C', [0]),
('C(=O)/C(C)=N\\O', [0]),
('C(=O)C(=C)C', [0]),
('n1nnc(/C(C)=N/N)c1C', [0]),
('C(=O)C(O)C(C)(C)CO', [0]),
('[O-][NH2+][O-]', []),
('N1CCN=C1SC', [0]),
('OC(O)P(=O)(O)CCCN', [0, 2]),
('N1CCCC1=O', [0]),
('O=S(=O)([O-])CCS.[Na+]', []),
('C/C(=N/O)C(N)=O', [0]),
('CCCN', [0]),
('C(O)CO', [0]),
('C(=O)CCC(N)C(=O)O', [0]),
('C=c1nnsc1=C1NC(c2cc(C)on2)=NO1', []),
('CC', [0]),
('ON1C(=O)[C@@H]2[C@@H](C1=O)[C@@H]1C=C[C@@H]2O1', [0]),
('C1OCCO1', [0]),
('N1C[C@H]2CCN[C@H]2C1', [0]),
('C(=O)NO', [0]),
('C(=O)CC1=NC(=O)CS1', [0]),
('CCCCCCCCCCCC', [0]),
('CCN(CC)/[N+]([O-])=N/OC', []),
('CCCC(C)=O', [0]),
('CC', [0, 1]),
('NSC(=S)N1CCCC1', []),
('n1ccc([N+](=O)[O-])n1', [0]),
('[C@H]1C(=O)SC1(C)C', [0]),
('c1cccs1', [0, 3]),
('C1OCCO1', [0, 0]),
('C(=O)[C@@H](N)[C@@H](C)O', [0]),
('CCCCN(CCCC)[NH2+][O-]', []),
('O[PbH2]O', [0, 2]),
('C=CCCCCCCCCC(=O)O', []),
('C[C@@H](N)C(=O)O', [0]),
('C(=O)CCCC(=O)O', [0]),
('C(=O)[C@@H](N)CCC', [0, 6]),
('OCO/N=[N+](\\[O-])N(CC)CC', [0]),
('CC#CCCC(=O)O', []),
('[N+]#N', [0]),
('C(=O)[C@@H]C(C)=O', [0, 2]),
('O=C[C@H](O)[C@@H](O)[C@H](O)[C@H](O)CO', []),
('C(=O)[C@@H]C', [0, 2]),
('CCCCCCCCC(=O)[O-]', [0]),
('N1C(=O)NC(=O)[C@@H]1', [0, 6]),
('CCN', [0]),
('C(CCCCCCCCCC)C(=O)O', [0]),
('[C@H]C(CC)CC', [0, 0]),
('[C@@]12C[C@]1(C)COC2=O', [0]),
('[C@H](CO)CC', [0, 4]),
('C(=O)[C@@H]CC(=O)O', [0, 2]),
('S(=O)(=O)c1cccs1', [0]),
('N1[C@H]2[C@H]C=C[C@H]21', [0, 2]),
('C(=N/c1nnc2nc[nH]n12)\\c1ccco1', []),
('S', [0, 0]),
('O=CC(O)C(O)C(O)CO', []),
('N1C[C@]23C=C[C@H](CC2C1=O)O3', [0]),
('O=C(CCCCCC(=O)N/N=C/[C@@H](O)[C@@H](O)[C@H](O)[C@H](O)CO)NO', []),
('c1cn(C)cn1', [0]),
('CC(C)[C@@H](N)C(=O)O', []),
('CCCCCCCCCC(=O)O', []),
('c1no[n+]([O-])c1', [0, 5]),
('N1C(=O)[C@@H]2[C@@H](C1=O)[C@@H]1C=C[C@@H]2C1', [0]),
('C[C@H]CO', [0, 1]),
('c1nnc2n1CCS2', [0]),
('CC(=O)/N=c1\\sc(S(N)(=O)=O)nn1C', []),
('[C@@H]1S/C(=N\\C)N(C)C1=O', [0]),
('n1nnnc1', [0, 4]),
('C(C)(C)CO', [0]),
('C(C)(C)CCCC(C)CC', [0, 9]),
('C#CCCCCCCCCCCCC(O)CC(O)CO.C=CCCCCCCCCCCCC(O)CC(O)CO', []),
('C[C@@H](C)O', [0]),
('[C@H](C)CO', [0]),
('c1cc(C)[nH]n1', [0]),
('C(C)C', [0]),
('CCC1=NCCO1', []),
('N1CC[C@H]2[C@@H]1CCN2', [0, 7]),
('n1[nH]c(=O)cc1N', [0]),
('OCC(Br)(Br)Br', []),
('C(=O)[C@@H]C', [0, 2, 4]),
('c1[nH]c(=O)[nH]c1C', [0]),
('[C@@H]1CS[C@](C)N1', [0, 3]),
('C(=O)CCCCCCC(=O)N/N=C/[C@H](O)[C@@H](O)[C@@H](O)[C@H](O)C(=O)O', [0]),
('C[C@H](C)N', [0]),
('c1ncc([N+](=O)[O-])s1', [0]),
('C(C)(C)CCC[C@H](C)CC', [0, 9]),
('[C@H](C[C@H](O)C(C)(O)CCC)CC', [0, 9, 11]),
('O=C(O)CCCCCCCC(O)C(O)CCCCCCO', []),
('O.O=C([O-])CC(O)(CC(=O)[O-])C(=O)[O-].[Li+].[Li+].[Li+]', []),
('O=C1NC(=O)C2(CCCC2)N1', []),
('C1NC(=O)C(C=C)=C1C', [0]),
('N=C(N)N.O=C(O)O', []),
('N1C(=O)NC2(CCCC2)C1=O', [0]),
('c1c(C)noc1N', [0]),
('c1nc[nH]c1N=NN(C)C', [0]),
('[C@H]1NCCS1', [0]),
('NCN', [0, 2]),
('NCCS(=O)(=O)O', []),
('[C@H]1CS(=O)(=O)C[C@@H]1O', [0]),
('C[C@H](N)CCP(=O)(O)O', []),
('c1csc(C)n1', [0]),
('O=C1CCOC1', []),
('[C@@H]1[C@H][C@@]2(C)CC[C@]1(C)O2', [0, 1]),
('C1C[C@@H]2C[C@@H]2N1', []),
('[C@]1(C)[C@H]2CC[C@@H](O2)[C@]1C', [0, 7]),
('C1C[C@H]2C[C@@H](O)[C@H][C@H]2C1', [0, 6]),
('N1C[C@H]2C[C@@H]O[C@H]2C1', [0, 4]),
('[C@H]1NC[C@H](C(=C)C)[C@@H]1', [0, 7]),
('C(=O)CC', [0, 3]),
('S(=O)(=O)c1nnc[nH]1', [0]),
('O=C(CCCCCCC(=O)N/N=C/[C@H](O)[C@@H](O)[C@H](O)[C@H](O)CO)NO', []),
('[C@@H]1C[C@H]2OC(=O)[C@@]34O[C@@H]5OC(=O)[C@H](O)[C@]51[C@@]23[C@@H](O)[C@@H]1OC(=O)[C@@H](C)[C@@]14O', [0]),
('C1(N)CC1', [0]),
('NC1=NC(=O)N2C[C@@H]12', []),
('C(=O)CCC(=O)CN', [0]),
('[C@@H](CCN)C(N)=O', [0]),
('[C@@H]1C[C@H]CN1C', [0, 2]),
('CCS', [0]),
('NC(CO)C(=O)O', []),
('C(=O)NNC[C@@H](O)C', [0, 7]),
('CCCCCCCC(=O)O', [0]),
('n1cncc1', [0, 3, 5]),
('O=C(CCCCCCC(=O)N/N=C/[C@@H](O)[C@@H](O)[C@H](O)[C@H](O)CO)NO', []),
('CC(C)(C)CN', []),
('CCCCCC[C@@H](C(=C)C(=O)O)C(=O)O', [0]),
('O=C([O-])P(=O)([O-])[O-].[Na+].[Na+].[Na+]', []),
('C/N=C1/S[C@@H]2CS(=O)(=O)C[C@@H]2N1C', []),
('Cn1cc(N)cn1', []),
('NC', [0]),
('N1C[C@H]2CC[C@H](O)[C@H]2C1', [0]),
('C(=O)CCCCCCCCCCCCC', [0]),
('CCCC(N)C(=O)O', [0]),
('CC(O)(P(=O)([O-])O)P(=O)([O-])O.[Na+].[Na+]', []),
('c1n[nH]c(=S)n1C', [0]),
('NC', [0, 0]),
('N1C[C@H]2CN(C)C(=O)[C@@H]2C1', [0]),
('S(=O)(=O)c1ccnn1C', [0]),
('[C@]12CO[C@]3(C)CC[C@](C)(OC1)N23', [0]),
('CN(C)C=C(C=[N+](C)C)c1[nH]ncc1N', []),
('O=C1OC(=O)[C@H]2[C@@H]1[C@H]1CC[C@H]2O1', []),
('[C@@H]1SC[C@@H]2N=C(N)N[C@@H]21', [0]),
('C[C@@H](O)[C@H](C)CC#CC', [0]),
('C(=O)CCC(=O)N(O)CCCCC', [0, 12]),
('CCO', [0, 1]),
('CC=O', [0, 1]),
('S(=O)(=O)[C@H]1CCS(=O)(=O)C1', [0]),
('Cc1ncc[nH]1', []),
('C(=O)n1ncc(C#N)c1N', [0]),
('CC', [0, 1]),
('[C@H](C)C(C)C', [0, 1]),
('C(=O)CCC(=O)N(O)CCCCCN', [0]),
('CCC#N', [0]),
('C1CSCN1', [0]),
('[C@@H](C)C(=O)O', [0]),
('Cc1n[nH]c(=S)n1N', []),
('C[C@@H](CN)CC(=O)O', []),
('C[S+](C)CC[C@H](N)C(=O)O', []),
('[C@@H](CC)CO', [0]),
('C=O', [0, 0]),
('CCCC(=O)O', [0, 1]),
('C[C@@H](O)CC(=O)O', [0]),
('N1C[C@@H]2COC[C@]2C1', [0, 6]),
('O=C(CCCCCC(=O)N/N=C/[C@H](O)[C@@H](O)[C@@H](O)[C@H](O)C(=O)O)NO', []),
('CS(N)(=O)=O', [0]),
('[C@@H]1CC[C@](C)C1(C)C', [0, 3]),
('CC1(C)C2CCC1(C)C(O)C2', []),
('NCCCCCC(=O)O', []),
('[C@H](C)CC', [0]),
('N1CCC2(C1)CNC2', [0, 6]),
('CC(=O)CC(=O)O', []),
('O=Cc1ccc[nH]1', []),
('c1cccn1C', [0]),
('O=C1CN(/N=C/c2ccc([N+](=O)[O-])o2)C(=O)N1', []),
('c1cc(C)on1', [0]),
('CC1OC1P(=O)([O-])[O-].[Ca+2]', []),
('C(=O)[C@@H](N)CCC(=O)O', [0]),
('c1nnco1', [0, 3]),
('CC(CC)CCCC', [0]),
('C(=O)O', [0]),
('c1[nH]cnc1/N=N/N(C)C', [0]),
('c1ccoc1', [0]),
('CC(C)(/N=N/C(C)(C)C(=N)N)C(=N)N', []),
('ClC=C(Cl)Cl', []),
('CCCCC', [0, 4]),
('CC(N)CCCC(C)(C)O.Cl', []),
('CC(=O)[O-]', [0]),
('Cc1cn[nH]c1.Cl', []),
('NC(N)=N[N+](=O)[O-]', [0]),
('N1CC[C@]2(CCN2)C1', [0, 6]),
('O=C1OCCN1N=Cc1ccc([N+](=O)[O-])o1', []),
('NC(=O)CC(N)=S', []),
('C(CC)[C@@H](C)[N+](=O)[O-]', [0]),
('CC(C)C[C@@](O)(CC(=O)O)C(=O)O', []),
('C(=O)CCCCCCCC', [0, 9]),
('CCCCCCC', [0, 6]),
('c1n[nH]c(C)c1', [0, 5]),
('CC#N', [0]),
('N1C(=O)CNC1=O', [0]),
('CCC(=O)Nn1c(C)nnc1C', []),
('c1nccs1', [0]),
('CC', [0, 1]),
('[C@@H](CC(=O)O)C(=O)O', [0]),
('C(C)O', [0]),
('CCC(C)C(N)C(=O)O', []),
('[C@]12CC[C@@H](CC1=O)C2(C)C', [0]),
('[C@@H]1O[Sb]2(O)(O[Sb]34(O)O[C@H]([C@H]O3)[C@@H]O4)O[C@H]1[C@@H]O2', [0, 9, 12, 17]),
('S(=O)(=O)c1ccsc1', [0, 7]),
('c1snnc1C', [0]),
('c1ccnn1C', [0]),
('C(=O)CC=O', [0, 3]),
('[C@@H]1SCNC1(C)C', [0]),
('C[C@H]1C[C@@H]2CNC[C@@H]2O1', []),
('c1nc(C)cs1', [0, 4]),
('FC(F)(F)C(Cl)Br', []),
('NCCCC(O)(P(=O)(O)O)P(=O)(O)O.O.O.O.[Na+]', []),
('n1cnnc1', [0, 4]),
('S(=O)(=O)c1c[nH]cc1', [0, 6]),
('CCCCC', [0, 3]),
('O=C(O)C[C@@H](O)C(=O)O', []),
('N1C(=O)CC[C@H]1', [0, 5]),
('C#CCCC(=O)NO', []),
('c1c(Br)cnn1C', [0]),
('CCCC', [0]),
('C(=O)CC(=O)[O-]', [0, 2]),
('O=C(O)CCCCCCCC(=O)O', []),
('n1ncnc1', [0, 2, 5]),
('[C@@]1(C)CC(=O)NC1=O', [0]),
('c1nnnn1C', [0]),
('C(CCC(=O)O)C(=O)O', [0]),
('C1OC2CC(=O)N2C1', [0, 7]),
('C1CC1', [0]),
('C[C@@H](O)C[C@@H](O)CCCCCCCCCCCC=C', [0]),
('c1nnc[nH]1', [0]),
('O/N=[N+](\\[O-])N1CCCC1', [0]),
('C1(C)CC(=O)NC1=O', [0]),
('CC(=O)n1cccn1', [0]),
('Cc1cn[nH]c1', []),
('NC1CONC1=O', []),
('CCCO', [0]),
('N1C(=O)N[C@@H](O)[C@H]1O', [0, 3]),
('C(=O)/C=c1\\sc2n(c1=O)CCN=2', [0]),
('N1C[C@H]2C[C@@H]1C(=O)O2', [0]),
('N1C(=O)CNC1=S', [0]),
('OP(=O)(O)O', [0]),
('N1C[C@@]23C=C[C@](C)(O2)[C@@H]C3C1=O', [0, 8]),
('CC(C)C[C@H](N)C(=O)O', []),
('CCCCC', [0]),
('CC12C(=O)OC(=O)C1(C)C1CCC2O1', []),
('CS(=O)(=O)c1nnc(N)s1', []),
('CCO', [0]),
('C[C@H](O)CC(=O)O', [0]),
('[C@H]1N[C@H]2C[C@@H]1C[C@@H]2F', [0]),
('C(=O)C(=NO)c1csc(N)n1', [0, 4]),
('CS(=O)(=O)[C@H]1CCNC1', []),
('C[C@@H](N)CCP(=O)(O)O', []),
('N1C(=O)CSC1=S', [0]),
('C(C)CCC(C)CCCC(C)CCCC(C)C', [0]),
('CC[C@@H](N)C(=O)O', [0]),
('CCC(=O)O', []),
('CC(=O)[O-]', [0]),
('CCCC', [0, 3]),
('C=CCN=C=S', []),
('S=C(c1cccs1)N1CCCC1', []),
('SC(=N)N', [0]),
('C[C@H]1CNC(=O)O1', []),
('N1CC[C@H]2[C@@H]1CCN2C', [0]),
('c1nc[nH]c1C', [0]),
('CN', [0]),
('C1C=CCC1', [0]),
('N1C(=O)[C@H]2[C@H][C@@H]3C=C[C@]2(O3)[C@H]1', [0, 4, 11]),
('C1CC1', [0, 0]),
('C(=O)[C@H](N)C', [0, 4]),
('O[N+](=O)[O-]', [0]),
('C[C@@H](N)C(=O)O', [0]),
('c1n[nH]c2c1C[C@H]1C[C@@H]21', [0]),
('CCCCCCCC', [0]),
('CCC', [0]),
('n1nccc1', [0, 4]),
('C(=O)N1NC[C@H]1', [0, 5]),
('OP(=O)(OC)OC', [0]),
('NC(=N)NC', [0]),
('C', [0, 0]),
('[C@@H](C)C(=O)O', [0]),
('c1nnc2n1CCC2', [0]),
('[C@@H]1C[C@H]C(=O)O1', [0, 2]),
('Cc1nnc(N)s1', []),
('N1C(=O)S[C@@H]C1=O', [0, 4]),
('Cn1nc2c(c1N)CCC2', []),
('[C@]1(O)C[C@@H]2OC(=O)C[C@]23C(=O)O[C@@H]2OC(=O)[C@H](O)[C@@]213', [0]),
('[C@]12CC[C@@H](C(=O)C1=O)C2(C)C', [0]),
('CO/N=[N+](\\[O-])N1CCCC1', []),
('N1CC[C@H]2NC(=O)C[C@H]21', [0]),
('[C@H](O)CO', [0]),
('SS(=O)(=O)O', [0]),
('NNC(=O)CCCCCCC(=O)O', []),
('N1CCCC1', [0, 4]),
('CCCN(CCC)[NH2+][O-]', []),
('C[C@H](O)CC', [0]),
('N1CC[C@]2(CCOC2)C1', [0]),
('N[C@H](C(=O)O)[C@@H](O)C(=O)O', []),
('C(C)(C)C', [0]),
('Cc1ncc([N+](=O)[O-])n1C', []),
('C(=O)[C@@H]CCC(N)=O', [0, 2]),
('c1nn(C)cc1Cl', [0]),
('CC(N)=O', [0]),
('N1CSC[C@H]1', [0, 4]),
('C(F)(F)F', [0]),
('CN(C)C(=N)NC(=N)N.Cl', []),
('OP(=O)(F)O', [0, 4]),
('C1C(=O)C=C[C@@H]1', [0, 5]),
('ON1C(C)(C)C=C(C(N)=O)C1(C)C', [0]),
('I.[KH]', []),
('c1coc(C)n1', [0]),
('CCCCCCCCCCCCCCCCCCCCCCO', []),
('c1sccc1C', [0]),
('C(=O)N/N=C/c1ccc([N+](=O)[O-])o1', [0]),
('O=C(CCCCCCC(=O)NO)NO', []),
('c1nn(C)c2c1CN(C)C2', [0]),
('N1C[C@H]2C[C@H]N(C)[C@H]2C1', [0, 4]),
('S(=O)(=O)C(F)(F)C(F)(F)C(F)(F)C(F)(F)C(F)(F)C(F)(F)C(F)(F)C(F)(F)F', [0]),
('C(=O)[C@@H](N)C(C)C', [0]),
('[C@H]1CCNC1', [0]),
('CC', [0, 1, 1]),
('CCCCCCCCCCCC=C', [0]),
('C[C@@H]1COS(=O)(=O)N1', []),
('N1CC[C@@]2(CC(=O)NC2)C1', [0, 7]),
('O', [0, 0]),
('O=C(CCCCCCC(=O)N/N=C/[C@H](O)[C@@H](O)[C@@H](O)[C@H](O)C(=O)O)NO', []),
('CC(=O)NO', []),
('C[C@@H](O)CC(C)(C)O', []),
('C1O[C@@H]2CC(=O)N2[C@H]1', [0, 7]),
('N1C[C@@H]2CN(C)C(=O)[C@@H]2C1', [0]),
('c1c(C)oc(N)c1', [0, 6]),
('Cn1sccc1=O', []),
('[C@@H]1N2C(=O)C[C@H]2S(=O)(=O)C1(C)C', [0]),
('c1cnc(N)s1', [0]),
('CCCCCC', [0, 5]),
('CN1CC(=O)NC1=N', []),
('CC(=O)n1nc(C)cc1C', [0]),
('C1CCC(=O)N1', [0]),
('CC#C', [0]),
('Nc1ccn[nH]1', []),
('N1CCCC1', [0]),
('C(C)C(=O)O', [0, 1]),
('N#CCC(=O)NN', []),
('Cc1cc(N)[nH]n1', []),
('c1nnc(S(N)(=O)=O)s1', [0]),
('NC=O', [0]),
('CC1=CC(=O)[C@H](O)[C@H]1O', [0]),
('CC/C(N)=N\\S(N)(=O)=O', [0]),
('NC(=C[N+](=O)[O-])NC', [0]),
('C[C@@H](C)O', [0]),
('[C@@H](CC(=O)O)C(=O)O', [0]),
('C(O)CN', [0, 0]),
('CCC(C)(C)O', []),
('FC(F)(Cl)C(F)(F)Cl', []),
('[C@@H]1SC[C@H](N)[C@H]1N', [0]),
('[C@H]1CC(=O)N(C)C1', [0]),
('[C@]1(O)C[C@@H]2OC(=O)C[C@@]23C(=O)O[C@@H]2OC(=O)[C@H](O)[C@]213', [0]),
('C[C@@H](O)[C@@H](O)[C@@H](O)C/C=N/NC(=O)CCCCC(=O)NO', []),
('CS(=N)(=O)CC[C@H](N)C(=O)O', []),
('O=C1NCC2(CNC2)O1', []),
('N1C(=O)OC(C)(C)[C@]1(C)O', [0]),
('N1C(=O)N[C@@H][C@H]1', [0, 3, 5, 7]),
('SC1=C(C(=O)[O-])N2C(=O)CC2C1C', [0, 9]),
('NC(=O)CC[C@H](N)C(=O)O', []),
('[C@@H]1NCC[C@@H]1', [0, 4]),
('C[C@@H](CN)CO', [0]),
('O=[N+]([O-])C(Br)(CO)CO', []),
('c1ccc(Br)o1', [0]),
('[C@@H]1CCCN1', [0]),
('NC(=S)S', [0, 3]),
('[C@H]1CC[C@@](N)C1', [0, 3]),
('O=C([O-])C(O)C(O)C(O)C(O)CO.[Na+]', []),
('c1nc(C)no1', [0]),
('CC#C', [0]),
('C(=O)N1NC[C@@H]1', [0, 5]),
('N1C(=O)C[C@H](O)C1=O', [0]),
('n1cc(Br)cn1', [0]),
('CCCCC', [0, 4]),
('CCCCCCCCCCCCCCCCCCCCCCCCC(=O)O', []),
('CCB(O)O', [0]),
('[N+]1(C)CCCC1', [0]),
('N#C[Fe-2](C#N)(C#N)(C#N)(C#N)[N+][O-]', []),
('c1[nH]cc(O)c1O', [0, 2]),
('C(=O)C(CC)CC', [0]),
('N1CCC[C@H]1B(O)O', [0]),
('C(C(F)(F)F)C(F)(F)F', [0]),
('SC', [0]),
('CCCCCC(=O)O', [0]),
('CCCCCCCCC(N)=O', [0]),
('N1C[C@@H]2CCN[C@@H]2C1', [0]),
('n1nccn1', [0, 3]),
('C1CCCC1', [0]),
('NC(=O)CC1=NC(=O)CS1', []),
('S(=O)(=O)c1c(C)n[nH]c1C', [0]),
('Cl.[NaH]', []),
('CC(C)O', [0]),
('N1C[C@@]23C=C[C@@H](O2)[C@@H]C3C1=O', [0, 7]),
('N1C(=O)CCC1=O', [0]),
('IC(I)I', []),
('CCCCC(=O)O', [0]),
('CCCC[C@@H](N)C(=O)O', [0]),
('C1SCC2NC(=O)NC21', [0]),
('N1C[C@H]2CNC[C@@H]2C1', [0]),
('NCCCCCC(O)(P(=O)(O)O)P(=O)(O)O', []),
('C1CC2CCC1(C)C2(C)C', [0]),
('CC', [0]),
('c1cc(C)n(C)n1', [0]),
('[C@H]1CC[C@](N)C1', [0, 3]),
('C[C@H]', [0, 1, 1]),
('N1CC[C@@H]C1=O', [0, 3]),
('[C@@H]1N2C(=O)C[C@H]2S(=O)(=O)[C@]1C', [0, 9]),
('NC[C@@H](O)CC(=O)O', []),
('[C@@H]1CCSC1=O', [0]),
('n1cncn1', [0, 3]),
('N[C@@H](CN(O)[N+][O-])C(=O)O', []),
('N1CC([N+](=O)[O-])([N+](=O)[O-])C1', [0]),
('[C@@H]1CCCO1', [0]),
('Cc1cnc[nH]1', []),
('CCCCCN(O)C(C)=O', [0]),
('Cc1noc(C)c1S(=O)(=O)/N=C/N(C)C', []),
('S(=O)(=O)CC', [0]),
('CC(C)(C)CCC', [0, 3]),
('Cc1n[nH]c(C)c1N', []),
('CCCC(=O)O', [0]),
('CC(C)O', [0]),
('OC', [0]),
('CCCCN(O)C(C)=O', [0]),
('[C@H](N)CC', [0]),
('C(=O)CC(O)(CC=O)C(=O)O', [0, 6]),
('Cc1ccc(/C=c2\\sc3ncnn3c2=O)o1', []),
('S(=O)(=O)c1cn(C)cn1', [0]),
('C(=O)C=O', [0, 2]),
('c1c[nH]c(=S)n1C', [0]),
('[C@@H]1CO1', [0]),
('C(=O)CO', [0]),
('O=S1(=O)CC=CC1', []),
('C(=O)[C@@H]C', [0, 2]),
('N1CC[C@@H]C1', [0, 3]),
('OC[C@@H](O)[C@@H](O)[C@@H](O)[C@@H](O)[C@@H](O)CO', []),
('c1nc(C)oc1C', [0]),
('c1cncn1C', [0]),
('[C@H](O)CCC(C)C', [0]),
('CN1CCNC1=S', []),
('C/C(C)=N/O', [0]),
('C(=O)CCCC', [0, 5]),
('NC(=N)N=C(N)N', [0]),
('CCO', [0]),
('C(C)(C)CC', [0]),
('N1C[C@H](O)C[C@H]1', [0, 5]),
('C=C(C)[C@]1(O)OC(=O)C=C1OC', []),
('O=C(CCCCCCC(=O)N/N=C/[C@H](O)[C@@H](O)[C@@H](O)[C@H](O)CO)NO', []),
('Cn1cc[nH]c1=S', []),
('[C@@H]1C(=O)N(S(=O)(=O)O)[C@H]1C', [0]),
('[C@@H]1SC[C@@H]2NC(=O)N[C@@H]21', [0]),
('CCCCCCCCCCC(=O)O', [0]),
('CC(C)CC(=O)C(=O)O', []),
('C[C@H]CC(=O)O', [0, 1]),
('C[C@@H](O)C(=O)O.N', []),
('NC(=S)SSC(=S)N', [0, 0, 8, 8]),
('[C@@H](CCCC[C@@H](C)CCC)[C@@H](CO)C(=O)O', [0, 8]),
('C(=O)C[C@@H](CC(=O)O)C(=O)O', [0]),
('CCCCCCCCC', [0]),
('C(=O)C(C)(C)C', [0]),
('CCC(O)(P(=O)([O-])O)P(=O)(O)O', [0]),
('CC[C@@H](N)C(=O)O', [0]),
('C1(C)OC(=O)N(C)C1=O', [0]),
('n1c([N+](=O)[O-])cnc1C', [0]),
('C(O)C(Cl)(Cl)Cl', [0]),
('CCC(N)=NS(N)(=O)=O', [0]),
('O=C(CCCCCC(=O)N/N=C/[C@H](O)[C@@H](O)[C@H](O)[C@H](O)CO)NO', []),
('OCO/N=[N+](\\[O-])N1CCCC1', [0]),
('C(=O)CCC(N)C(=O)[O-]', [0]),
('NCCC(O)(P(=O)(O)O)P(=O)(O)O', []),
('[C@H]1[C@@H]2OC[C@](N)[C@H]12', [0, 4]),
('N1Cc2cnn(C)c2C1', [0, 3]),
('[C@@H]1O[C@H][C@@H](O)[C@@H]1O', [0, 2]),
('N1C[C@@H]2CC[C@H](O)[C@@H]2C1', [0]),
('C[C@H](N)C(=O)O', [0]),
('n1nncc1C', [0, 3]),
('CC', [0, 1]),
('[C@H]1CNC(=O)C1', [0]),
('CC(C)CC(N)=O', []),
('C(C)(C)O', [0]),
('OS(N)(=O)=O', [0]),
('NCCCCC(=O)O', []),
('C(=O)[C@H]CCC', [0, 2, 6]),
('N1CC(O)CC1=O', [0]),
('C(C)CCCC(C)C', [0]),
('Nc1[nH]ncc1Cl', []),
('c1nncn1C', [0]),
('SP(=O)(O)O', [0]),
('CC#CC', [0]),
('n1cc(N)cn1', [0]),
('Cc1ccc(C=Nn2nnnc2N)s1', []),
('O=C(O)C(Cl)Cl', []),
('C1CNC1', [0]),
('C(=O)CCCCCCCCCCCCCCCCC', [0]),
('O=C(CCCCCC(=O)N/N=C/[C@H](O)[C@@H](O)[C@@H](O)[C@H](O)CO)NO', []),
('CC(C)(C)C#CC(=O)C#CC(C)(C)C', []),
('O=C(O)[C@H](O)[C@@H](O)C(=O)O', []),
('C(=O)CC', [0, 2, 4]),
('Cl.N=C(N)NN', []),
('Cn1cnc([N+](=O)[O-])c1Cl', []),
('CC', [0]),
('[C@]12CO[C@]3(C)CC[C@](C)(OC1)N23', [0]),
('c1[nH]sc(=NN)c1C#N', [0]),
('[C@@H](CC(C)C)C(=O)O', [0]),
('O=C(CCCCC(=O)N/N=C/[C@@H](O)[C@@H](O)[C@H](O)[C@H](O)CO)NO', []),
('C[C@@H](O)CCCCC', [0]),
('n1nncn1', [0, 3]),
('[C@H]1CSC[C@@H]1', [0, 4]),
('O=C(CCCCCCC(=O)N/N=C/[C@@H](O)[C@H](O)[C@H](O)CO)NO', []),
('C[C@@H](O)[C@@H](O)[C@@H](O)[C@@H](O)C', [0, 9]),
('SS', [0, 1]),
('O=C(O)C(O)C(O)C(O)C(O)C(=O)O', []),
('C1(N)CCCC1', [0]),
('c1cc2sccc2s1', [0]),
('[C@H]1CCOC1', [0]),
('c1ccc(C)n1C', [0]),
('N1CC[C@H]2[C@H]1CC(=O)N2', [0, 8]),
('n1ccnn1', [0, 2]),
('[C@@H]1[C@H]2CNC[C@@H]12', [0]),
('CC(C)C', [0]),
('CCC(N)C(=O)O', [0]),
('S(=O)(=O)CCCC', [0]),
('CCCCCC(CC(=O)O)C(=O)O', []),
('C[C@H]C', [0, 1]),
('CC(N)C(=O)O', [0]),
('C(C)CP(=O)(O)O', [0]),
('O=C(CO)C(O)C(O)C(O)CO', []),
('C(=O)CCCCCCCC=O', [0, 9]),
('C[Si](C)(C)O[Si](C)(C)O[Si](C)(C)C', []),
('C1CCSC1=O', [0]),
('Cl.NCCCCCC(=O)O', []),
('[C@H]1NC(=O)C(C(C)=O)=C1O', [0]),
('CC(O)C(=O)[O-].[Na+]', []),
('C[C@@H](O)CN', [0]),
('[C@@H]1C2C=CC3(O2)C1C(=O)N1CCS(=O)[C@H]13', [0]),
('OC', [0, 1]),
('C1CCC1', [0]),
('N1C[C@]23C=C[C@H](C[C@H]2S1(=O)=O)O3', [0]),
('N1CC(S(=O)(=O)CC(C)C)C1', [0]),
('C(=O)C', [0, 2]),
('n1nc(C)c([N+](=O)[O-])c1C', [0]),
('C1CC(N)C1', [0, 2]),
('C(=O)CCS', [0, 2]),
('N1CCN=C1C', [0]),
('C1OCC(O)C1O', [0, 2]),
('COP(=O)(OC)OC=C(Cl)Cl', []),
('C(=O)CC[C@@H](N)C(=O)O', [0]),
('CN1C(=O)N(C)C2C1N(C)C(=O)N2C', []),
('n1cccn1', [0, 3]),
('CCC', [0, 2]),
('O=C(O)CC(O)(CC(=O)O)C(=O)O.[LiH].[LiH].[LiH]', []),
('C(CC(=O)O)C(=O)O', [0]),
('O=P([O-])([O-])F.[Na+].[Na+]', []),
('Cl.NCCCC(=O)O', []),
('O=C(O)CCCCC(=O)O', []),
('S[As](C)C', [0]),
('C(=O)CN', [0]),
('C[C@H](N)C(=O)O', []),
('OCC(O)C(O)C(O)CO', []),
('C(=O)C(C)CS', [0]),
('CC(C)(S)C(N)C(=O)O.NCCO', []),
('Cl.NCCCC(N)C(=O)O', []),
('C1CC2OC(=O)C34OC5OC(=O)C(O)C15C23CC1OC(=O)C(C)C14O', [0]),
('c1noc(C)c1[N+](=O)[O-]', [0]),
('NC(=NC#N)NC', [0]),
('c1cc(=O)[nH]o1', [0]),
('CO', [0]),
('CC(O)C', [0, 3]),
('C(=O)N1C[C@@H]N1', [0, 4]),
('OCC(S)CS', []),
('c1nnc(N)s1', [0]),
('N[C@@H]1CONC1=O', []),
('O=C(O)P(=O)(O)O', []),
('n1nncc1', [0, 3, 5]),
('NC(=S)NC', [0]),
('CC(=O)NN', [0]),
('CC(=O)[C@H](O)[C@@H](O)C', [0, 7]),
('C1SC(N)=NC1=O', [0, 0]),
('C(=O)[C@@H]CC(C)C', [0, 2]),
('OP(=O)([O-])O', [0, 4]),
('C(=O)[C@H](Br)C(C)C', [0]),
('CCCC(=O)O', []),
('NCP(=O)(O)O', [0]),
('c1[nH]cnc1C', [0]),
('N[C@@H](CC(=O)NO)C(=O)O', []),
('C(=O)[C@@H]CCCCN', [0, 2]),
('N1C[C@@H](O)C[C@H]1', [0, 5]),
('N1C(=S)NC(=O)C1N=O', [0, 3]),
('C(=O)[C@H](O)C(C)(C)CO', [0]),
('[C@H]1CCC(=O)N1', [0]),
('CC(C)C(=O)O', []),
('CC(C)CCC[C@@H](C)N', []),
('[C@H]1SCCC1=O', [0]),
('c1ccn(C)n1', [0]),
('[C@@H](CC(C)C)[C@@H](O)CC(=O)O', [0]),

]

class MPNNet(nn.Module):
    def __init__(
        self,
        num_feat=14,
        num_vec=3,
        dim=64,
        num_out_per_mol=1,
        num_out_per_stem=105,
        num_out_per_bond=1,
        num_conv_steps=12,
    ):
        super().__init__()
        self.lin0 = nn.Linear(num_feat + num_vec, dim)
        self.num_ops = num_out_per_stem
        self.num_opm = num_out_per_mol
        self.num_conv_steps = num_conv_steps
        self.dropout_rate = 0

        self.act = nn.LeakyReLU()

        net = nn.Sequential(nn.Linear(4, 128), self.act, nn.Linear(128, dim * dim))
        self.conv = NNConv(dim, dim, net, aggr="mean")
        self.gru = nn.GRU(dim, dim)

        self.set2set = Set2Set(dim, processing_steps=3)
        self.lin3 = nn.Linear(dim * 2, num_out_per_mol)
        self.bond2out = nn.Sequential(
            nn.Linear(dim * 2, dim), self.act, nn.Linear(dim, dim), self.act, nn.Linear(dim, num_out_per_bond)
        )

    def forward(self, data, do_dropout=False):
        out = self.act(self.lin0(data.x))
        h = out.unsqueeze(0)
        h = F.dropout(h, training=do_dropout, p=self.dropout_rate)

        for i in range(self.num_conv_steps):
            m = self.act(self.conv(out, data.edge_index, data.edge_attr))
            m = F.dropout(m, training=do_dropout, p=self.dropout_rate)
            out, h = self.gru(m.unsqueeze(0).contiguous(), h.contiguous())
            h = F.dropout(h, training=do_dropout, p=self.dropout_rate)
            out = out.squeeze(0)

        global_out = self.set2set(out, data.batch)
        global_out = F.dropout(global_out, training=do_dropout, p=self.dropout_rate)
        per_mol_out = self.lin3(global_out)  # per mol scalar outputs
        return per_mol_out


def request():
    return requests.get(
        "https://github.com/GFNOrg/gflownet/raw/master/mols/data/pretrained_proxy/best_params.pkl.gz",
        stream=True,
        timeout=30,
    )


def download(location):
    f = request()
    location.parent.mkdir(exist_ok=True)
    with open(location, "wb") as fd:
        for chunk in f.iter_content(chunk_size=128):
            fd.write(chunk)


def load_weights(cache, location):
    if not cache:
        return pickle.load(gzip.open(request().raw))  # nosec

    try:
        gz = gzip.open(location)
    except gzip.BadGzipFile:
        download(location)
        gz = gzip.open(location)
    except FileNotFoundError:
        download(location)
        gz = gzip.open(location)
    return pickle.load(gz)  # nosec


def load_original_model(cache=True, location=Path(__file__).parent / "cache" / "bengio2021flow_proxy.pkl.gz"):
    num_feat = 14 + 1 + NUM_ATOMIC_NUMBERS
    mpnn = MPNNet(num_feat=num_feat, num_vec=0, dim=64, num_out_per_mol=1, num_out_per_stem=105, num_conv_steps=12)

    params = load_weights(cache, location)
    param_map = {
        "lin0.weight": params[0],
        "lin0.bias": params[1],
        "conv.bias": params[3],
        "conv.nn.0.weight": params[4],
        "conv.nn.0.bias": params[5],
        "conv.nn.2.weight": params[6],
        "conv.nn.2.bias": params[7],
        "conv.lin.weight": params[2],
        "gru.weight_ih_l0": params[8],
        "gru.weight_hh_l0": params[9],
        "gru.bias_ih_l0": params[10],
        "gru.bias_hh_l0": params[11],
        "set2set.lstm.weight_ih_l0": params[16],
        "set2set.lstm.weight_hh_l0": params[17],
        "set2set.lstm.bias_ih_l0": params[18],
        "set2set.lstm.bias_hh_l0": params[19],
        "lin3.weight": params[20],
        "lin3.bias": params[21],
    }
    for k, v in param_map.items():
        mpnn.get_parameter(k).data = torch.tensor(v)
    return mpnn


_mpnn_feat_cache = [None]


def mpnn_feat(mol, ifcoord=True, panda_fmt=False, one_hot_atom=False, donor_features=False):
    atomtypes = {"H": 0, "C": 1, "N": 2, "O": 3, "F": 4}
    bondtypes = {BT.SINGLE: 0, BT.DOUBLE: 1, BT.TRIPLE: 2, BT.AROMATIC: 3, BT.UNSPECIFIED: 0}

    natm = len(mol.GetAtoms())
    ntypes = len(atomtypes)
    # featurize elements
    # columns are: ["type_idx" .. , "atomic_number", "acceptor", "donor",
    # "aromatic", "sp", "sp2", "sp3", "num_hs", [atomic_number_onehot] .. ])

    nfeat = ntypes + 1 + 8
    if one_hot_atom:
        nfeat += NUM_ATOMIC_NUMBERS
    atmfeat = np.zeros((natm, nfeat))

    # featurize
    for i, atom in enumerate(mol.GetAtoms()):
        type_idx = atomtypes.get(atom.GetSymbol(), 5)
        atmfeat[i, type_idx] = 1
        if one_hot_atom:
            atmfeat[i, ntypes + 9 + atom.GetAtomicNum() - 1] = 1
        else:
            atmfeat[i, ntypes + 1] = (atom.GetAtomicNum() % 16) / 2.0
        atmfeat[i, ntypes + 4] = atom.GetIsAromatic()
        hybridization = atom.GetHybridization()
        atmfeat[i, ntypes + 5] = hybridization == HybridizationType.SP
        atmfeat[i, ntypes + 6] = hybridization == HybridizationType.SP2
        atmfeat[i, ntypes + 7] = hybridization == HybridizationType.SP3
        atmfeat[i, ntypes + 8] = atom.GetTotalNumHs(includeNeighbors=True)

    # get donors and acceptors
    if donor_features:
        if _mpnn_feat_cache[0] is None:
            fdef_name = os.path.join(RDConfig.RDDataDir, "BaseFeatures.fdef")
            factory = ChemicalFeatures.BuildFeatureFactory(fdef_name)
            _mpnn_feat_cache[0] = factory
        else:
            factory = _mpnn_feat_cache[0]
        feats = factory.GetFeaturesForMol(mol)
        for j in range(0, len(feats)):
            if feats[j].GetFamily() == "Donor":
                node_list = feats[j].GetAtomIds()
                for k in node_list:
                    atmfeat[k, ntypes + 3] = 1
            elif feats[j].GetFamily() == "Acceptor":
                node_list = feats[j].GetAtomIds()
                for k in node_list:
                    atmfeat[k, ntypes + 2] = 1
    # get coord
    if ifcoord:
        coord = np.asarray([mol.GetConformer(0).GetAtomPosition(j) for j in range(natm)])
    else:
        coord = None
    # get bonds and bond features
    bond = np.asarray([[bond.GetBeginAtomIdx(), bond.GetEndAtomIdx()] for bond in mol.GetBonds()])
    bondfeat = [bondtypes[bond.GetBondType()] for bond in mol.GetBonds()]
    bondfeat = onehot(bondfeat, num_classes=len(bondtypes) - 1)

    return atmfeat, coord, bond, bondfeat


def mol_to_graph_backend(atmfeat, coord, bond, bondfeat, props={}, data_cls=Data):
    "convert to PyTorch geometric module"
    natm = atmfeat.shape[0]
    # transform to torch_geometric bond format; send edges both ways; sort bonds
    atmfeat = torch.tensor(atmfeat, dtype=torch.float32)
    if bond.shape[0] > 0:
        edge_index = torch.tensor(np.concatenate([bond.T, np.flipud(bond.T)], axis=1), dtype=torch.int64)
        edge_attr = torch.tensor(np.concatenate([bondfeat, bondfeat], axis=0), dtype=torch.float32)
        edge_index, edge_attr = coalesce(edge_index, edge_attr, natm, natm)
    else:
        edge_index = torch.zeros((0, 2), dtype=torch.int64)
        edge_attr = torch.tensor(bondfeat, dtype=torch.float32)

    # make torch data
    if coord is not None:
        coord = torch.tensor(coord, dtype=torch.float32)
        data = data_cls(x=atmfeat, pos=coord, edge_index=edge_index, edge_attr=edge_attr, **props)
    else:
        data = data_cls(x=atmfeat, edge_index=edge_index, edge_attr=edge_attr, **props)
    return data


def onehot(arr, num_classes, dtype=np.int32):
    arr = np.asarray(arr, dtype=np.int32)
    assert len(arr.shape) == 1, "dims other than 1 not implemented"
    onehot_arr = np.zeros(arr.shape + (num_classes,), dtype=dtype)
    onehot_arr[np.arange(arr.shape[0]), arr] = 1
    return onehot_arr


def mol2graph(mol, floatX=torch.float, bonds=False, nblocks=False):
    rdmol = mol
    if rdmol is None:
        g = Data(
            x=torch.zeros((1, 14 + NUM_ATOMIC_NUMBERS)),
            edge_attr=torch.zeros((0, 4)),
            edge_index=torch.zeros((0, 2)).long(),
        )
    else:
        atmfeat, _, bond, bondfeat = mpnn_feat(mol, ifcoord=False, one_hot_atom=True, donor_features=False)
        g = mol_to_graph_backend(atmfeat, None, bond, bondfeat)
    stem_mask = torch.zeros((g.x.shape[0], 1))
    g.x = torch.cat([g.x, stem_mask], 1).to(floatX)
    g.edge_attr = g.edge_attr.to(floatX)
    if g.edge_index.shape[0] == 0:
        g.edge_index = torch.zeros((2, 1)).long()
        g.edge_attr = torch.zeros((1, g.edge_attr.shape[1])).to(floatX)
    return g


def mols2batch(mols):
    batch = Batch.from_data_list(mols)
    return batch
